// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SipMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Acafela.Sip {

  /// <summary>Holder for reflection information generated from SipMessage.proto</summary>
  public static partial class SipMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for SipMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SipMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTaXBNZXNzYWdlLnByb3RvEgthY2FmZWxhLnNpcCJSCgdTZXNzaW9uEi0K",
            "C3Nlc3Npb250eXBlGAEgASgOMhguYWNhZmVsYS5zaXAuU2Vzc2lvblR5cGUS",
            "CgoCaXAYAiABKAkSDAoEcG9ydBgDIAEoBSI1CgtTZXNzaW9uSW5mbxImCghz",
            "ZXNzaW9ucxgBIAMoCzIULmFjYWZlbGEuc2lwLlNlc3Npb24imAEKClNJUE1l",
            "c3NhZ2USIQoDY21kGAEgASgOMhQuYWNhZmVsYS5zaXAuQ29tbWFuZBIMCgRm",
            "cm9tGAIgASgJEgoKAnRvGAMgASgJEhEKCXNlc3Npb25pZBgEIAEoCRILCgNz",
            "ZXEYBSABKAUSLQoLc2Vzc2lvbmluZm8YBiABKAsyGC5hY2FmZWxhLnNpcC5T",
            "ZXNzaW9uSW5mbyqoAQoHQ29tbWFuZBIKCgZJTlZJVEUQABILCgdSSU5HSU5H",
            "EAESDgoKQUNDRVBUQ0FMTBACEgwKCE1BS0VDQUxMEAMSDwoLT1BFTlNFU1NJ",
            "T04QBBIOCgpTVEFSVFZJREVPEAUSDQoJU1RPUFZJREVPEAYSDQoJVEVSTUlO",
            "QVRFEAcSBwoDQllFEAgSDAoIUkVHSVNURVIQCRIQCgxDTE9TRVNFU1NJT04Q",
            "CipPCgtTZXNzaW9uVHlwZRINCglTRU5EQVVESU8QABIQCgxSRUNJRVZFQVVE",
            "SU8QARINCglTRU5EVklERU8QAhIQCgxSRUNJRVZFVklERU8QA0IZChdjb20u",
            "YWNhZmVsYS5oYXJtb255LnNpcGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Acafela.Sip.Command), typeof(global::Acafela.Sip.SessionType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Acafela.Sip.Session), global::Acafela.Sip.Session.Parser, new[]{ "Sessiontype", "Ip", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Acafela.Sip.SessionInfo), global::Acafela.Sip.SessionInfo.Parser, new[]{ "Sessions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Acafela.Sip.SIPMessage), global::Acafela.Sip.SIPMessage.Parser, new[]{ "Cmd", "From", "To", "Sessionid", "Seq", "Sessioninfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Command {
    [pbr::OriginalName("INVITE")] Invite = 0,
    [pbr::OriginalName("RINGING")] Ringing = 1,
    [pbr::OriginalName("ACCEPTCALL")] Acceptcall = 2,
    [pbr::OriginalName("MAKECALL")] Makecall = 3,
    [pbr::OriginalName("OPENSESSION")] Opensession = 4,
    [pbr::OriginalName("STARTVIDEO")] Startvideo = 5,
    [pbr::OriginalName("STOPVIDEO")] Stopvideo = 6,
    [pbr::OriginalName("TERMINATE")] Terminate = 7,
    [pbr::OriginalName("BYE")] Bye = 8,
    [pbr::OriginalName("REGISTER")] Register = 9,
    [pbr::OriginalName("CLOSESESSION")] Closesession = 10,
  }

  public enum SessionType {
    [pbr::OriginalName("SENDAUDIO")] Sendaudio = 0,
    [pbr::OriginalName("RECIEVEAUDIO")] Recieveaudio = 1,
    [pbr::OriginalName("SENDVIDEO")] Sendvideo = 2,
    [pbr::OriginalName("RECIEVEVIDEO")] Recievevideo = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Session : pb::IMessage<Session> {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Acafela.Sip.SipMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      sessiontype_ = other.sessiontype_;
      ip_ = other.ip_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "sessiontype" field.</summary>
    public const int SessiontypeFieldNumber = 1;
    private global::Acafela.Sip.SessionType sessiontype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Acafela.Sip.SessionType Sessiontype {
      get { return sessiontype_; }
      set {
        sessiontype_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sessiontype != other.Sessiontype) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sessiontype != 0) hash ^= Sessiontype.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sessiontype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Sessiontype);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sessiontype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sessiontype);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.Sessiontype != 0) {
        Sessiontype = other.Sessiontype;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            sessiontype_ = (global::Acafela.Sip.SessionType) input.ReadEnum();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionInfo : pb::IMessage<SessionInfo> {
    private static readonly pb::MessageParser<SessionInfo> _parser = new pb::MessageParser<SessionInfo>(() => new SessionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Acafela.Sip.SipMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionInfo(SessionInfo other) : this() {
      sessions_ = other.sessions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionInfo Clone() {
      return new SessionInfo(this);
    }

    /// <summary>Field number for the "sessions" field.</summary>
    public const int SessionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Acafela.Sip.Session> _repeated_sessions_codec
        = pb::FieldCodec.ForMessage(10, global::Acafela.Sip.Session.Parser);
    private readonly pbc::RepeatedField<global::Acafela.Sip.Session> sessions_ = new pbc::RepeatedField<global::Acafela.Sip.Session>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Acafela.Sip.Session> Sessions {
      get { return sessions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sessions_.Equals(other.sessions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sessions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sessions_.WriteTo(output, _repeated_sessions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sessions_.CalculateSize(_repeated_sessions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionInfo other) {
      if (other == null) {
        return;
      }
      sessions_.Add(other.sessions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sessions_.AddEntriesFrom(input, _repeated_sessions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SIPMessage : pb::IMessage<SIPMessage> {
    private static readonly pb::MessageParser<SIPMessage> _parser = new pb::MessageParser<SIPMessage>(() => new SIPMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SIPMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Acafela.Sip.SipMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SIPMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SIPMessage(SIPMessage other) : this() {
      cmd_ = other.cmd_;
      from_ = other.from_;
      to_ = other.to_;
      sessionid_ = other.sessionid_;
      seq_ = other.seq_;
      sessioninfo_ = other.sessioninfo_ != null ? other.sessioninfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SIPMessage Clone() {
      return new SIPMessage(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::Acafela.Sip.Command cmd_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Acafela.Sip.Command Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sessionid" field.</summary>
    public const int SessionidFieldNumber = 4;
    private string sessionid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sessionid {
      get { return sessionid_; }
      set {
        sessionid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 5;
    private int seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    /// <summary>Field number for the "sessioninfo" field.</summary>
    public const int SessioninfoFieldNumber = 6;
    private global::Acafela.Sip.SessionInfo sessioninfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Acafela.Sip.SessionInfo Sessioninfo {
      get { return sessioninfo_; }
      set {
        sessioninfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SIPMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SIPMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Sessionid != other.Sessionid) return false;
      if (Seq != other.Seq) return false;
      if (!object.Equals(Sessioninfo, other.Sessioninfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Sessionid.Length != 0) hash ^= Sessionid.GetHashCode();
      if (Seq != 0) hash ^= Seq.GetHashCode();
      if (sessioninfo_ != null) hash ^= Sessioninfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(To);
      }
      if (Sessionid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sessionid);
      }
      if (Seq != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Seq);
      }
      if (sessioninfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Sessioninfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (Sessionid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sessionid);
      }
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seq);
      }
      if (sessioninfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sessioninfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SIPMessage other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Sessionid.Length != 0) {
        Sessionid = other.Sessionid;
      }
      if (other.Seq != 0) {
        Seq = other.Seq;
      }
      if (other.sessioninfo_ != null) {
        if (sessioninfo_ == null) {
          sessioninfo_ = new global::Acafela.Sip.SessionInfo();
        }
        Sessioninfo.MergeFrom(other.Sessioninfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            cmd_ = (global::Acafela.Sip.Command) input.ReadEnum();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            To = input.ReadString();
            break;
          }
          case 34: {
            Sessionid = input.ReadString();
            break;
          }
          case 40: {
            Seq = input.ReadInt32();
            break;
          }
          case 50: {
            if (sessioninfo_ == null) {
              sessioninfo_ = new global::Acafela.Sip.SessionInfo();
            }
            input.ReadMessage(sessioninfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
