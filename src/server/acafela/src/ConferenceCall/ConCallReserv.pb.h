// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConCallReserv.proto

#ifndef PROTOBUF_INCLUDED_ConCallReserv_2eproto
#define PROTOBUF_INCLUDED_ConCallReserv_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ConCallReserv_2eproto 

namespace protobuf_ConCallReserv_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ConCallReserv_2eproto
namespace acafela {
namespace rpc {
class ConCallResrvInfo;
class ConCallResrvInfoDefaultTypeInternal;
extern ConCallResrvInfoDefaultTypeInternal _ConCallResrvInfo_default_instance_;
}  // namespace rpc
}  // namespace acafela
namespace google {
namespace protobuf {
template<> ::acafela::rpc::ConCallResrvInfo* Arena::CreateMaybeMessage<::acafela::rpc::ConCallResrvInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace acafela {
namespace rpc {

// ===================================================================

class ConCallResrvInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acafela.rpc.ConCallResrvInfo) */ {
 public:
  ConCallResrvInfo();
  virtual ~ConCallResrvInfo();

  ConCallResrvInfo(const ConCallResrvInfo& from);

  inline ConCallResrvInfo& operator=(const ConCallResrvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConCallResrvInfo(ConCallResrvInfo&& from) noexcept
    : ConCallResrvInfo() {
    *this = ::std::move(from);
  }

  inline ConCallResrvInfo& operator=(ConCallResrvInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConCallResrvInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConCallResrvInfo* internal_default_instance() {
    return reinterpret_cast<const ConCallResrvInfo*>(
               &_ConCallResrvInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConCallResrvInfo* other);
  friend void swap(ConCallResrvInfo& a, ConCallResrvInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConCallResrvInfo* New() const final {
    return CreateMaybeMessage<ConCallResrvInfo>(NULL);
  }

  ConCallResrvInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConCallResrvInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConCallResrvInfo& from);
  void MergeFrom(const ConCallResrvInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConCallResrvInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string participants = 4;
  int participants_size() const;
  void clear_participants();
  static const int kParticipantsFieldNumber = 4;
  const ::std::string& participants(int index) const;
  ::std::string* mutable_participants(int index);
  void set_participants(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_participants(int index, ::std::string&& value);
  #endif
  void set_participants(int index, const char* value);
  void set_participants(int index, const char* value, size_t size);
  ::std::string* add_participants();
  void add_participants(const ::std::string& value);
  #if LANG_CXX11
  void add_participants(::std::string&& value);
  #endif
  void add_participants(const char* value);
  void add_participants(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& participants() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_participants();

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string host_phonenumber = 3;
  void clear_host_phonenumber();
  static const int kHostPhonenumberFieldNumber = 3;
  const ::std::string& host_phonenumber() const;
  void set_host_phonenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_host_phonenumber(::std::string&& value);
  #endif
  void set_host_phonenumber(const char* value);
  void set_host_phonenumber(const char* value, size_t size);
  ::std::string* mutable_host_phonenumber();
  ::std::string* release_host_phonenumber();
  void set_allocated_host_phonenumber(::std::string* host_phonenumber);

  // @@protoc_insertion_point(class_scope:acafela.rpc.ConCallResrvInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> participants_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr host_phonenumber_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ConCallReserv_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConCallResrvInfo

// string from = 1;
inline void ConCallResrvInfo::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConCallResrvInfo::from() const {
  // @@protoc_insertion_point(field_get:acafela.rpc.ConCallResrvInfo.from)
  return from_.GetNoArena();
}
inline void ConCallResrvInfo::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acafela.rpc.ConCallResrvInfo.from)
}
#if LANG_CXX11
inline void ConCallResrvInfo::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acafela.rpc.ConCallResrvInfo.from)
}
#endif
inline void ConCallResrvInfo::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acafela.rpc.ConCallResrvInfo.from)
}
inline void ConCallResrvInfo::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.ConCallResrvInfo.from)
}
inline ::std::string* ConCallResrvInfo::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:acafela.rpc.ConCallResrvInfo.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConCallResrvInfo::release_from() {
  // @@protoc_insertion_point(field_release:acafela.rpc.ConCallResrvInfo.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConCallResrvInfo::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:acafela.rpc.ConCallResrvInfo.from)
}

// string to = 2;
inline void ConCallResrvInfo::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConCallResrvInfo::to() const {
  // @@protoc_insertion_point(field_get:acafela.rpc.ConCallResrvInfo.to)
  return to_.GetNoArena();
}
inline void ConCallResrvInfo::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acafela.rpc.ConCallResrvInfo.to)
}
#if LANG_CXX11
inline void ConCallResrvInfo::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acafela.rpc.ConCallResrvInfo.to)
}
#endif
inline void ConCallResrvInfo::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acafela.rpc.ConCallResrvInfo.to)
}
inline void ConCallResrvInfo::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.ConCallResrvInfo.to)
}
inline ::std::string* ConCallResrvInfo::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:acafela.rpc.ConCallResrvInfo.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConCallResrvInfo::release_to() {
  // @@protoc_insertion_point(field_release:acafela.rpc.ConCallResrvInfo.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConCallResrvInfo::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:acafela.rpc.ConCallResrvInfo.to)
}

// string host_phonenumber = 3;
inline void ConCallResrvInfo::clear_host_phonenumber() {
  host_phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConCallResrvInfo::host_phonenumber() const {
  // @@protoc_insertion_point(field_get:acafela.rpc.ConCallResrvInfo.host_phonenumber)
  return host_phonenumber_.GetNoArena();
}
inline void ConCallResrvInfo::set_host_phonenumber(const ::std::string& value) {
  
  host_phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acafela.rpc.ConCallResrvInfo.host_phonenumber)
}
#if LANG_CXX11
inline void ConCallResrvInfo::set_host_phonenumber(::std::string&& value) {
  
  host_phonenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acafela.rpc.ConCallResrvInfo.host_phonenumber)
}
#endif
inline void ConCallResrvInfo::set_host_phonenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acafela.rpc.ConCallResrvInfo.host_phonenumber)
}
inline void ConCallResrvInfo::set_host_phonenumber(const char* value, size_t size) {
  
  host_phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.ConCallResrvInfo.host_phonenumber)
}
inline ::std::string* ConCallResrvInfo::mutable_host_phonenumber() {
  
  // @@protoc_insertion_point(field_mutable:acafela.rpc.ConCallResrvInfo.host_phonenumber)
  return host_phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConCallResrvInfo::release_host_phonenumber() {
  // @@protoc_insertion_point(field_release:acafela.rpc.ConCallResrvInfo.host_phonenumber)
  
  return host_phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConCallResrvInfo::set_allocated_host_phonenumber(::std::string* host_phonenumber) {
  if (host_phonenumber != NULL) {
    
  } else {
    
  }
  host_phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_phonenumber);
  // @@protoc_insertion_point(field_set_allocated:acafela.rpc.ConCallResrvInfo.host_phonenumber)
}

// repeated string participants = 4;
inline int ConCallResrvInfo::participants_size() const {
  return participants_.size();
}
inline void ConCallResrvInfo::clear_participants() {
  participants_.Clear();
}
inline const ::std::string& ConCallResrvInfo::participants(int index) const {
  // @@protoc_insertion_point(field_get:acafela.rpc.ConCallResrvInfo.participants)
  return participants_.Get(index);
}
inline ::std::string* ConCallResrvInfo::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:acafela.rpc.ConCallResrvInfo.participants)
  return participants_.Mutable(index);
}
inline void ConCallResrvInfo::set_participants(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:acafela.rpc.ConCallResrvInfo.participants)
  participants_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ConCallResrvInfo::set_participants(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:acafela.rpc.ConCallResrvInfo.participants)
  participants_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ConCallResrvInfo::set_participants(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:acafela.rpc.ConCallResrvInfo.participants)
}
inline void ConCallResrvInfo::set_participants(int index, const char* value, size_t size) {
  participants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.ConCallResrvInfo.participants)
}
inline ::std::string* ConCallResrvInfo::add_participants() {
  // @@protoc_insertion_point(field_add_mutable:acafela.rpc.ConCallResrvInfo.participants)
  return participants_.Add();
}
inline void ConCallResrvInfo::add_participants(const ::std::string& value) {
  participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:acafela.rpc.ConCallResrvInfo.participants)
}
#if LANG_CXX11
inline void ConCallResrvInfo::add_participants(::std::string&& value) {
  participants_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:acafela.rpc.ConCallResrvInfo.participants)
}
#endif
inline void ConCallResrvInfo::add_participants(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:acafela.rpc.ConCallResrvInfo.participants)
}
inline void ConCallResrvInfo::add_participants(const char* value, size_t size) {
  participants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:acafela.rpc.ConCallResrvInfo.participants)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConCallResrvInfo::participants() const {
  // @@protoc_insertion_point(field_list:acafela.rpc.ConCallResrvInfo.participants)
  return participants_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConCallResrvInfo::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:acafela.rpc.ConCallResrvInfo.participants)
  return &participants_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace acafela

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ConCallReserv_2eproto
