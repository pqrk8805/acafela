// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: UserAdmin.proto
#ifndef GRPC_UserAdmin_2eproto__INCLUDED
#define GRPC_UserAdmin_2eproto__INCLUDED

#include "UserAdmin.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace acafela {
namespace rpc {

class UserAdmin final {
 public:
  static constexpr char const* service_full_name() {
    return "acafela.rpc.UserAdmin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::acafela::rpc::UserInfoList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::UserInfoList>> AsyncgetUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::UserInfoList>>(AsyncgetUserInfoListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::UserInfoList>> PrepareAsyncgetUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::UserInfoList>>(PrepareAsyncgetUserInfoListRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::acafela::rpc::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>> AsyncdeleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>>(AsyncdeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>> PrepareAsyncdeleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>>(PrepareAsyncdeleteUserRaw(context, request, cq));
    }
    virtual ::grpc::Status disableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::acafela::rpc::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>> AsyncdisableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>>(AsyncdisableUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>> PrepareAsyncdisableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>>(PrepareAsyncdisableUserRaw(context, request, cq));
    }
    virtual ::grpc::Status enableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::acafela::rpc::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>> AsyncenableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>>(AsyncenableUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>> PrepareAsyncenableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>>(PrepareAsyncenableUserRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)>) = 0;
      virtual void disableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::UserInfoList>* AsyncgetUserInfoListRaw(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::UserInfoList>* PrepareAsyncgetUserInfoListRaw(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>* AsyncdeleteUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>* PrepareAsyncdeleteUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>* AsyncdisableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>* PrepareAsyncdisableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>* AsyncenableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::acafela::rpc::Error>* PrepareAsyncenableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::acafela::rpc::UserInfoList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>> AsyncgetUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>>(AsyncgetUserInfoListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>> PrepareAsyncgetUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>>(PrepareAsyncgetUserInfoListRaw(context, request, cq));
    }
    ::grpc::Status deleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::acafela::rpc::Error* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>> AsyncdeleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>>(AsyncdeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>> PrepareAsyncdeleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>>(PrepareAsyncdeleteUserRaw(context, request, cq));
    }
    ::grpc::Status disableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::acafela::rpc::Error* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>> AsyncdisableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>>(AsyncdisableUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>> PrepareAsyncdisableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>>(PrepareAsyncdisableUserRaw(context, request, cq));
    }
    ::grpc::Status enableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::acafela::rpc::Error* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>> AsyncenableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>>(AsyncenableUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>> PrepareAsyncenableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>>(PrepareAsyncenableUserRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response, std::function<void(::grpc::Status)>) override;
      void deleteUser(::grpc::ClientContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)>) override;
      void disableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)>) override;
      void enableUser(::grpc::ClientContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>* AsyncgetUserInfoListRaw(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>* PrepareAsyncgetUserInfoListRaw(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* AsyncdeleteUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* PrepareAsyncdeleteUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* AsyncdisableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* PrepareAsyncdisableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* AsyncenableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* PrepareAsyncenableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::Email& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getUserInfoList_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteUser_;
    const ::grpc::internal::RpcMethod rpcmethod_disableUser_;
    const ::grpc::internal::RpcMethod rpcmethod_enableUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getUserInfoList(::grpc::ServerContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response);
    virtual ::grpc::Status deleteUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response);
    virtual ::grpc::Status disableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response);
    virtual ::grpc::Status enableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getUserInfoList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getUserInfoList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getUserInfoList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserInfoList(::grpc::ServerContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUserInfoList(::grpc::ServerContext* context, ::acafela::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::acafela::rpc::UserInfoList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_deleteUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteUser(::grpc::ServerContext* context, ::acafela::rpc::Email* request, ::grpc::ServerAsyncResponseWriter< ::acafela::rpc::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_disableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_disableUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_disableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status disableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdisableUser(::grpc::ServerContext* context, ::acafela::rpc::Email* request, ::grpc::ServerAsyncResponseWriter< ::acafela::rpc::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_enableUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_enableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenableUser(::grpc::ServerContext* context, ::acafela::rpc::Email* request, ::grpc::ServerAsyncResponseWriter< ::acafela::rpc::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getUserInfoList<WithAsyncMethod_deleteUser<WithAsyncMethod_disableUser<WithAsyncMethod_enableUser<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getUserInfoList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getUserInfoList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getUserInfoList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserInfoList(::grpc::ServerContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_deleteUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_disableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_disableUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_disableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status disableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_enableUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_enableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getUserInfoList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getUserInfoList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getUserInfoList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUserInfoList(::grpc::ServerContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUserInfoList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_deleteUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_disableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_disableUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_disableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status disableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdisableUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_enableUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_enableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenableUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getUserInfoList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getUserInfoList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::acafela::rpc::Empty, ::acafela::rpc::UserInfoList>(std::bind(&WithStreamedUnaryMethod_getUserInfoList<BaseClass>::StreamedgetUserInfoList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getUserInfoList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getUserInfoList(::grpc::ServerContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetUserInfoList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::acafela::rpc::Empty,::acafela::rpc::UserInfoList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_deleteUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::acafela::rpc::Email, ::acafela::rpc::Error>(std::bind(&WithStreamedUnaryMethod_deleteUser<BaseClass>::StreameddeleteUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::acafela::rpc::Email,::acafela::rpc::Error>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_disableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_disableUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::acafela::rpc::Email, ::acafela::rpc::Error>(std::bind(&WithStreamedUnaryMethod_disableUser<BaseClass>::StreameddisableUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_disableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status disableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddisableUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::acafela::rpc::Email,::acafela::rpc::Error>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enableUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_enableUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::acafela::rpc::Email, ::acafela::rpc::Error>(std::bind(&WithStreamedUnaryMethod_enableUser<BaseClass>::StreamedenableUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_enableUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enableUser(::grpc::ServerContext* context, const ::acafela::rpc::Email* request, ::acafela::rpc::Error* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedenableUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::acafela::rpc::Email,::acafela::rpc::Error>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getUserInfoList<WithStreamedUnaryMethod_deleteUser<WithStreamedUnaryMethod_disableUser<WithStreamedUnaryMethod_enableUser<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getUserInfoList<WithStreamedUnaryMethod_deleteUser<WithStreamedUnaryMethod_disableUser<WithStreamedUnaryMethod_enableUser<Service > > > > StreamedService;
};

}  // namespace rpc
}  // namespace acafela


#endif  // GRPC_UserAdmin_2eproto__INCLUDED
