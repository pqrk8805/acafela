// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: UserAdmin.proto

#include "UserAdmin.pb.h"
#include "UserAdmin.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace acafela {
namespace rpc {

static const char* UserAdmin_method_names[] = {
  "/acafela.rpc.UserAdmin/getUserInfoList",
  "/acafela.rpc.UserAdmin/deleteUser",
  "/acafela.rpc.UserAdmin/disableUser",
  "/acafela.rpc.UserAdmin/enableUser",
};

std::unique_ptr< UserAdmin::Stub> UserAdmin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserAdmin::Stub> stub(new UserAdmin::Stub(channel));
  return stub;
}

UserAdmin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getUserInfoList_(UserAdmin_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteUser_(UserAdmin_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_disableUser_(UserAdmin_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enableUser_(UserAdmin_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserAdmin::Stub::getUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::acafela::rpc::UserInfoList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getUserInfoList_, context, request, response);
}

void UserAdmin::Stub::experimental_async::getUserInfoList(::grpc::ClientContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getUserInfoList_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>* UserAdmin::Stub::AsyncgetUserInfoListRaw(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::UserInfoList>::Create(channel_.get(), cq, rpcmethod_getUserInfoList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::UserInfoList>* UserAdmin::Stub::PrepareAsyncgetUserInfoListRaw(::grpc::ClientContext* context, const ::acafela::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::UserInfoList>::Create(channel_.get(), cq, rpcmethod_getUserInfoList_, context, request, false);
}

::grpc::Status UserAdmin::Stub::deleteUser(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::acafela::rpc::Error* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_deleteUser_, context, request, response);
}

void UserAdmin::Stub::experimental_async::deleteUser(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_deleteUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* UserAdmin::Stub::AsyncdeleteUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_deleteUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* UserAdmin::Stub::PrepareAsyncdeleteUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_deleteUser_, context, request, false);
}

::grpc::Status UserAdmin::Stub::disableUser(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::acafela::rpc::Error* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_disableUser_, context, request, response);
}

void UserAdmin::Stub::experimental_async::disableUser(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_disableUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* UserAdmin::Stub::AsyncdisableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_disableUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* UserAdmin::Stub::PrepareAsyncdisableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_disableUser_, context, request, false);
}

::grpc::Status UserAdmin::Stub::enableUser(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::acafela::rpc::Error* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_enableUser_, context, request, response);
}

void UserAdmin::Stub::experimental_async::enableUser(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_enableUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* UserAdmin::Stub::AsyncenableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_enableUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* UserAdmin::Stub::PrepareAsyncenableUserRaw(::grpc::ClientContext* context, const ::acafela::rpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_enableUser_, context, request, false);
}

UserAdmin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAdmin_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAdmin::Service, ::acafela::rpc::Empty, ::acafela::rpc::UserInfoList>(
          std::mem_fn(&UserAdmin::Service::getUserInfoList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAdmin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAdmin::Service, ::acafela::rpc::UserInfo, ::acafela::rpc::Error>(
          std::mem_fn(&UserAdmin::Service::deleteUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAdmin_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAdmin::Service, ::acafela::rpc::UserInfo, ::acafela::rpc::Error>(
          std::mem_fn(&UserAdmin::Service::disableUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAdmin_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAdmin::Service, ::acafela::rpc::UserInfo, ::acafela::rpc::Error>(
          std::mem_fn(&UserAdmin::Service::enableUser), this)));
}

UserAdmin::Service::~Service() {
}

::grpc::Status UserAdmin::Service::getUserInfoList(::grpc::ServerContext* context, const ::acafela::rpc::Empty* request, ::acafela::rpc::UserInfoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAdmin::Service::deleteUser(::grpc::ServerContext* context, const ::acafela::rpc::UserInfo* request, ::acafela::rpc::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAdmin::Service::disableUser(::grpc::ServerContext* context, const ::acafela::rpc::UserInfo* request, ::acafela::rpc::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAdmin::Service::enableUser(::grpc::ServerContext* context, const ::acafela::rpc::UserInfo* request, ::acafela::rpc::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace acafela
}  // namespace rpc

