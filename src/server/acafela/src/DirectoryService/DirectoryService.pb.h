// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DirectoryService.proto

#ifndef PROTOBUF_INCLUDED_DirectoryService_2eproto
#define PROTOBUF_INCLUDED_DirectoryService_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DirectoryService_2eproto 

namespace protobuf_DirectoryService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DirectoryService_2eproto
namespace acafela {
namespace rpc {
class DirInfo;
class DirInfoDefaultTypeInternal;
extern DirInfoDefaultTypeInternal _DirInfo_default_instance_;
}  // namespace rpc
}  // namespace acafela
namespace google {
namespace protobuf {
template<> ::acafela::rpc::DirInfo* Arena::CreateMaybeMessage<::acafela::rpc::DirInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace acafela {
namespace rpc {

// ===================================================================

class DirInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acafela.rpc.DirInfo) */ {
 public:
  DirInfo();
  virtual ~DirInfo();

  DirInfo(const DirInfo& from);

  inline DirInfo& operator=(const DirInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirInfo(DirInfo&& from) noexcept
    : DirInfo() {
    *this = ::std::move(from);
  }

  inline DirInfo& operator=(DirInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirInfo* internal_default_instance() {
    return reinterpret_cast<const DirInfo*>(
               &_DirInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DirInfo* other);
  friend void swap(DirInfo& a, DirInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirInfo* New() const final {
    return CreateMaybeMessage<DirInfo>(NULL);
  }

  DirInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DirInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DirInfo& from);
  void MergeFrom(const DirInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phone_number = 1;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 1;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:acafela.rpc.DirInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DirectoryService_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirInfo

// string phone_number = 1;
inline void DirInfo::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirInfo::phone_number() const {
  // @@protoc_insertion_point(field_get:acafela.rpc.DirInfo.phone_number)
  return phone_number_.GetNoArena();
}
inline void DirInfo::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acafela.rpc.DirInfo.phone_number)
}
#if LANG_CXX11
inline void DirInfo::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acafela.rpc.DirInfo.phone_number)
}
#endif
inline void DirInfo::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acafela.rpc.DirInfo.phone_number)
}
inline void DirInfo::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.DirInfo.phone_number)
}
inline ::std::string* DirInfo::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:acafela.rpc.DirInfo.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirInfo::release_phone_number() {
  // @@protoc_insertion_point(field_release:acafela.rpc.DirInfo.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirInfo::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:acafela.rpc.DirInfo.phone_number)
}

// string password = 2;
inline void DirInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirInfo::password() const {
  // @@protoc_insertion_point(field_get:acafela.rpc.DirInfo.password)
  return password_.GetNoArena();
}
inline void DirInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acafela.rpc.DirInfo.password)
}
#if LANG_CXX11
inline void DirInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acafela.rpc.DirInfo.password)
}
#endif
inline void DirInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acafela.rpc.DirInfo.password)
}
inline void DirInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.DirInfo.password)
}
inline ::std::string* DirInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:acafela.rpc.DirInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirInfo::release_password() {
  // @@protoc_insertion_point(field_release:acafela.rpc.DirInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:acafela.rpc.DirInfo.password)
}

// string address = 3;
inline void DirInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirInfo::address() const {
  // @@protoc_insertion_point(field_get:acafela.rpc.DirInfo.address)
  return address_.GetNoArena();
}
inline void DirInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acafela.rpc.DirInfo.address)
}
#if LANG_CXX11
inline void DirInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acafela.rpc.DirInfo.address)
}
#endif
inline void DirInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acafela.rpc.DirInfo.address)
}
inline void DirInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acafela.rpc.DirInfo.address)
}
inline ::std::string* DirInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:acafela.rpc.DirInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirInfo::release_address() {
  // @@protoc_insertion_point(field_release:acafela.rpc.DirInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:acafela.rpc.DirInfo.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace acafela

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DirectoryService_2eproto
