// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DirectoryService.proto

#include "DirectoryService.pb.h"
#include "DirectoryService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace acafela {
namespace rpc {

static const char* DirectoryService_method_names[] = {
  "/acafela.rpc.DirectoryService/update",
};

std::unique_ptr< DirectoryService::Stub> DirectoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DirectoryService::Stub> stub(new DirectoryService::Stub(channel));
  return stub;
}

DirectoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_update_(DirectoryService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DirectoryService::Stub::update(::grpc::ClientContext* context, const ::acafela::rpc::DirInfo& request, ::acafela::rpc::Error* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_update_, context, request, response);
}

void DirectoryService::Stub::experimental_async::update(::grpc::ClientContext* context, const ::acafela::rpc::DirInfo* request, ::acafela::rpc::Error* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* DirectoryService::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::acafela::rpc::DirInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::acafela::rpc::Error>* DirectoryService::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::acafela::rpc::DirInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::acafela::rpc::Error>::Create(channel_.get(), cq, rpcmethod_update_, context, request, false);
}

DirectoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryService::Service, ::acafela::rpc::DirInfo, ::acafela::rpc::Error>(
          std::mem_fn(&DirectoryService::Service::update), this)));
}

DirectoryService::Service::~Service() {
}

::grpc::Status DirectoryService::Service::update(::grpc::ServerContext* context, const ::acafela::rpc::DirInfo* request, ::acafela::rpc::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace acafela
}  // namespace rpc

